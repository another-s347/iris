
syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.n2n";
option java_outer_classname = "n2nProto";

package n2n;

// The greeting service definition.
service N2N {
  // Sends a greeting
  rpc Hello(HelloRequest) returns (HelloReply) {}
  rpc GetObject (NodeObjectRef) returns (Value) {}
  rpc DelObject (ObjectId) returns (ObjectId) {}
  rpc WaitObject (NodeObjectRef) returns (HelloReply) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

message NodeObjectRef {
  uint64 id = 1;
  string location = 2;
  repeated string attr = 3;
}

message CallArgs {
  ProtoPyTuple args = 1;
  ProtoPyDict kwargs = 2;
  bool recursive = 3;
}

message CreateRequest {
  string module = 1;
  string qualname = 2;
  CallArgs arg = 3;
} 

message InitRequest {
  repeated string modules = 1;
  repeated string paths = 2;
  uint32 rank=3;
}

message CallRequest {
  uint64 object_id = 1;
  CallArgs arg = 2;
  string attr = 3;
}

message ApplyRequest {
  bytes func = 1;
  CallArgs arg = 2;
}

message TorchRpcCallRequest {
  string target_node = 1;
  uint64 object_id = 2;
  string attr = 3;
  CallArgs arg = 4;
  string torch_func = 5;
  bool to_here = 6;
}

message NodeObject {
  ProtoPyAny value = 1;
  uint64 id = 2;
  bytes exception = 3;
  string location = 4;
  string type = 5;
}

message GetAttrRequest {
  uint64 object_id = 1;
  string attr = 2;
}

message GetParameterRequest {
  uint64 object_id = 1;
}

message ModuleRef {
  string module = 1;
  string qualname = 2;
}

message ObjectId {
  uint64 id = 1;
}

message Value {
  bytes data = 1;
}

message ProtoPyAny {
  oneof data {
    string str = 1;
    float f32 = 2;
    int32 i32 = 3;
    uint32 u32 = 4;
    int64 i64 = 5;
    uint64 u64 = 6;
    bool boolean = 7;
    bytes bytes = 8;
    ProtoPyTuple tuple = 9;
    ProtoPyList list = 10;
    ProtoPyDict dict = 11;
    uint64 object_id = 12;
  }
}

message ProtoPyTuple {
  repeated ProtoPyAny items = 1;
}

message ProtoPyList {
  repeated ProtoPyAny items = 2;
}

message ProtoPyDict {
  map<string, ProtoPyAny> map = 3;
}